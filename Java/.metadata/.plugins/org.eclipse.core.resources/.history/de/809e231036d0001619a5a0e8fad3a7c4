package pers.fhr.exceldemo.util;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jxl.Cell;
import jxl.CellType;
import jxl.Sheet;
import jxl.Workbook;
import jxl.format.BorderLineStyle;
import jxl.format.Colour;
import jxl.format.UnderlineStyle;
import jxl.write.Alignment;
import jxl.write.Border;
import jxl.write.Label;
import jxl.write.Pattern;
import jxl.write.VerticalAlignment;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableFont.FontName;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
/**
 * Excel帮助类
 * @author fhr
 * @date 2017/01/01
 */
public class ExcelUtil {
  /**
   * 以二维字符串数组形式获取Excel
   * @param fileName
   * @return
   */
  public static List<String[][]> readExcel(String fileName){
	  List<String[][]> bookValues=new ArrayList<>();
	  Workbook readWb=null;
		try{
			InputStream inputStream=new FileInputStream(fileName);
			readWb=Workbook.getWorkbook(inputStream);
			 Sheet [] sheets=readWb.getSheets();
			for(Sheet readsheet : sheets){
				int columns=readsheet.getColumns();
				int rows=readsheet.getRows();
				String [][]sheetValue=new String[rows][columns];
				for(int i=0;i<rows;i++){
					for(int j=0;j<columns;j++){
						Cell cell=readsheet.getCell(j, i);
						sheetValue[i][j]=cell.getContents();
					}
				}
				bookValues.add(sheetValue);
			}
			return bookValues;
		}catch(Exception e){
			System.out.print( e.getMessage());
			return null;
		}
  }
  /**
   * 以二维字符串数组形式获取sheet
   * @param fileName
   * @param sheetName
   * @return
   */
  public static String[][] readExcel(String fileName,String sheetName){
	  Workbook readWb=null;
		try{
			InputStream inputStream=new FileInputStream(fileName);
			readWb=Workbook.getWorkbook(inputStream);
			 Sheet sheet=readWb.getSheet(sheetName);
				int columns=sheet.getColumns();
				int rows=sheet.getRows();
				String [][]sheetValue=new String[rows][columns];
				for(int i=0;i<rows;i++){
					for(int j=0;j<columns;j++){
						Cell cell=sheet.getCell(j, i);
						sheetValue[i][j]=cell.getContents();
					}
				}
				return sheetValue;
		}catch(Exception e){
			System.out.print( e.getMessage());
			return null;
		}
  }
  /**
   * 以字典集合形式获取Excel
   * @param fileName
   * @param sheetName
   * @return
   */
  @SuppressWarnings("rawtypes")
public static List<List<Map>> readExcelByMap(String fileName){
	  Workbook readWb=null;
		try{
			InputStream inputStream=new FileInputStream(fileName);
			 readWb=Workbook.getWorkbook(inputStream);
			 List<List<Map>> sheetMaps=new ArrayList<>();
			 Sheet [] sheets=readWb.getSheets();
			 for(Sheet sheet : sheets){
				 List<String> titles=getCollmnTitle(sheet);
				 if(titles==null){
					 return null;
				 }
			    List<Map> rowsMap=new ArrayList<>();
				int columns=sheet.getColumns();
				int rows=sheet.getRows();
				for(int i=1;i<rows;i++){
					Map<String, Object> rowMap=new HashMap<>();
					for(int j=0;j<columns;j++){
						Cell cell=sheet.getCell(j, i);
							rowMap.put(titles.get(j),ParseCellValue(cell));
						}
					rowsMap.add(rowMap);
				}
				sheetMaps.add(rowsMap);
			 }
			return sheetMaps;
		}catch(Exception e){
			System.out.print( e.getMessage());
			return null;
		}
  }
  /**
   * 以字典集合形式获取sheet
   * @param fileName
   * @param sheetName
   * @return
   */
  @SuppressWarnings({ "rawtypes"})
public static List<Map> readExcelByMap(String fileName,String sheetName){
	  Workbook readWb=null;
		try{
			InputStream inputStream=new FileInputStream(fileName);
			 readWb=Workbook.getWorkbook(inputStream);
			 Sheet sheet=readWb.getSheet(sheetName);
			 List<String> titles=getCollmnTitle(sheet);
			 if(titles==null){
				 return null;
			 }
		    List<Map> rowsMap=new ArrayList<>();
			int columns=sheet.getColumns();
			int rows=sheet.getRows();
			for(int i=1;i<rows;i++){
				Map<String, Object> rowMap=new HashMap<>();
				for(int j=0;j<columns;j++){
					Cell cell=sheet.getCell(j, i);
						rowMap.put(titles.get(j),ParseCellValue(cell));
					}
				rowsMap.add(rowMap);
			}
				return rowsMap;
		}catch(Exception e){
			System.out.print( e.getMessage());
			return null;
		}
  }
 @SuppressWarnings({ "rawtypes", "deprecation" })
 private static Object ParseCellValue(Cell cell){
		  Object object=null;
		  String value=cell.getContents();
		  if(value==null||value.equals("")){
			  object=value;
			  return object;
		  }
		  if(cell.getType()==CellType.BOOLEAN){
			  object=Boolean.parseBoolean(value);
		  }
		  else if(cell.getType()==CellType.LABEL){
			  object=value;
		  }
		  else if(cell.getType()==CellType.NUMBER){
			  object=Double.parseDouble(value);
		  }
		  /*日期转换 暂时不搞
		  else if(cell.getType()==CellType.DATE){
			  object=Date.parse(value);
		  }
		  */
		  else {
			  object=value;
		  }
		  return object;
  }
 /**
  * 获取列头
  * @param sheet
  * @return
  */
 public static List<String> getCollmnTitle(Sheet sheet){
		 List<String> columns=new ArrayList<>();
		 if(sheet.getRows()<1||sheet.getColumns()<1){
			 return null;
		 }
		 int columnsCount=sheet.getColumns();
		// Cell[] cells=sheet.getColumn(0);
		 for(int i=0;i<columnsCount;i++){
			 Cell cell=sheet.getCell(i, 0);
			 columns.add(cell.getContents());	
			}
		 return columns;
 }
 /***
  * 应用反射和注解将对象集合写入Excel
  * @param models
  * @param cls
  * @param fileName
  * @param sheetName
  */
 @SuppressWarnings("unchecked")
 public static <T> void createExcel(List<T> models, Class<T> cls,String fileName, String sheetName) {
     try {
         OutputStream os = new FileOutputStream(fileName);
         WritableWorkbook workbook = Workbook.createWorkbook(os);
         workbook.setColourRGB(Colour.BLUE2, 79, 129, 189);
         WritableSheet sheet = workbook.createSheet(sheetName, 0);
         // 设置行高度
         sheet.setRowView(7, 350);
     	/*
     	WritableFont titleFont = new WritableFont(WritableFont
     	         .createFont("华文行楷"), 18, WritableFont.BOLD, false,
     	         UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.TEAL);
     	 WritableCellFormat wcf_title = new WritableCellFormat(titleFont);
     	 wcf_title.setBackground(Colour.WHITE, Pattern.SOLID);
     	 wcf_title.setBorder(Border.RIGHT, BorderLineStyle.THIN,
     	         Colour.GRAY_25);
     	 wcf_title.setVerticalAlignment(VerticalAlignment.CENTRE); // 垂直对齐
     	wcf_title.setAlignment(Alignment.CENTRE);
     	return wcf_title;
     	*/
         // 用于标题
        WritableCellFormat wcf_title = SetCellStyle(WritableFont
    	         .createFont("仿宋"), 18,false, UnderlineStyle.NO_UNDERLINE, Colour.TEAL, Colour.WHITE, Pattern.SOLID,Border.RIGHT, BorderLineStyle.THIN,
     	         Colour.GRAY_25, VerticalAlignment.CENTRE, Alignment.CENTRE);
        /*
        // 用于列头
        WritableFont headFont = new WritableFont(WritableFont
                 .createFont("宋体"), 11, WritableFont.BOLD, false,
                 UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.WHITE);
         WritableCellFormat wcf_head = new WritableCellFormat(headFont);
         wcf_head.setBackground(Colour.LIGHT_BLUE, Pattern.PATTERN12);
         wcf_head.setBorder(Colour.LIGHT_BLUE, Pattern.PATTERN12);
         wcf_head.setVerticalAlignment(Colour.LIGHT_BLUE, Pattern.PATTERN12); // 垂直对齐
        wcf_head.setAlignment(Alignment.CENTRE);
		*/
        WritableCellFormat wcf_head =  SetCellStyle(WritableFont
   	         .createFont("仿宋"), 11,false, UnderlineStyle.NO_UNDERLINE, Colour.TEAL, Colour.WHITE, Pattern.SOLID,Border.RIGHT, BorderLineStyle.THIN,
 	         Colour.GRAY_25, VerticalAlignment.CENTRE, Alignment.CENTRE);
         // 用于正文
        /*
        WritableFont NormalFont = new WritableFont(WritableFont
                 .createFont("宋体"), 11);
         WritableCellFormat wcf_center = new WritableCellFormat(NormalFont);
         wcf_center
                 .setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLUE2);
         wcf_center.setVerticalAlignment(VerticalAlignment.CENTRE); // 垂直对齐
        wcf_center.setAlignment(Alignment.CENTRE);
         wcf_center.setWrap(true); // 是否换行
         */
        WritableCellFormat NormalFont =  SetCellStyle(WritableFont
      	         .createFont("仿宋"), 8,false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK, Colour.WHITE, Pattern.SOLID,Border.RIGHT, BorderLineStyle.THIN,
    	         Colour.GRAY_25, VerticalAlignment.CENTRE, Alignment.CENTRE);
        // 获取类中所有定义的字段
        Field[] fields = cls.getDeclaredFields();
         // 定义集合封装注解字段
        ArrayList<Field> annoFields = new ArrayList<Field>();
         for ( Field field :annoFields) {
             if (field.isAnnotationPresent(ExcelFieldAnnotation.class)) {
            	 //予许访问私有字段
            	 field.setAccessible(true);
                 annoFields.add(field);
             }
         }
         //添加标题单元
         sheet.addCell(new Label(0, 0, sheetName, wcf_title));
         sheet.mergeCells(0, 0, annoFields.size() == 0 ? 1:  annoFields.size() - 1, 0);
         // 写入Excel列头
        for (int i = 0; i < annoFields.size(); i++) {
             Field field =  annoFields.get(i);
             // 获取该字段的注解对象
             ExcelFieldAnnotation anno = field.getAnnotation(ExcelFieldAnnotation.class);
             //设置列样式
             sheet.setColumnView(anno.index(), anno.width());
             //添加列头
             sheet.addCell(new Label(anno.index(), 1, anno.name(), wcf_head));
         }
     // jxl 最大只支持65535行 算总共需要创建多少个Sheet
     //   int sheetCount = models.size() % 65535;
        int rowId = 2;// 写入第几行 第一行为列头 数据从第二行开始写
        for (Object model : models) {
             for (int i = 0; i < annoFields.size(); i++) {
                 Field field = annoFields.get(i);
                 try {
                	    ExcelFieldAnnotation anno = field.getAnnotation(ExcelFieldAnnotation.class);
                     sheet.addCell(new Label(anno.index(), rowId,field.get(model).toString(),NormalFont));
                 } catch (IllegalArgumentException e) {
                     e.printStackTrace();
                 } catch (IllegalAccessException e) {
                     e.printStackTrace();
                 }
             }
             rowId++;
         }

         workbook.write();
         workbook.close();
         os.flush();
         os.close();
     } catch (WriteException e) {
         e.printStackTrace();
     } catch (FileNotFoundException e) {
         e.printStackTrace();
     } catch (IOException e) {
         e.printStackTrace();
     } catch (SecurityException e) {
         e.printStackTrace();
     }
 }

private static WritableCellFormat SetCellStyle(FontName fontName,int ps,boolean it,UnderlineStyle underlineStyle
		,Colour colour,Colour backColor,jxl.format.Pattern solid
		,jxl.format.Border right,BorderLineStyle borderLineStyle,Colour borderColor
		,jxl.format.VerticalAlignment cENTRE,jxl.format.Alignment cENTRE2) throws WriteException {
	/*
	WritableFont titleFont = new WritableFont(WritableFont
	         .createFont("华文行楷"), 18, WritableFont.BOLD, false,
	         UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.TEAL);
	 WritableCellFormat wcf_title = new WritableCellFormat(titleFont);
	 wcf_title.setBackground(Colour.WHITE, Pattern.SOLID);
	 wcf_title.setBorder(Border.RIGHT, BorderLineStyle.THIN,
	         Colour.GRAY_25);
	 wcf_title.setVerticalAlignment(VerticalAlignment.CENTRE); // 垂直对齐
	wcf_title.setAlignment(Alignment.CENTRE);
	return wcf_title;
	*/
	WritableFont titleFont = new WritableFont(fontName, ps, WritableFont.BOLD, it,
	         underlineStyle, colour);
	 WritableCellFormat wcf_title = new WritableCellFormat(titleFont);
	 wcf_title.setBackground(backColor,solid);
	 wcf_title.setBorder(right, borderLineStyle,borderColor);
	 wcf_title.setVerticalAlignment(cENTRE); // 垂直对齐
	wcf_title.setAlignment(cENTRE2);
	return wcf_title;
}
}
